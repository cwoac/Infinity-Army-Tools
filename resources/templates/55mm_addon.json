"LuaScript": "--ThatRobHuman MiniHUD\nTRH_Class = 'mini'\nTRH_Version = '5.0'\nTRH_Save = 'eyJBUkNTIjp7IkJSQUNLRVRTIjpbXSwiQ09MT1IiOiIjZmZmZmZmIiwiTUFYIjoxLCJNRVNIIjoiIiwiTU9ERSI6MiwiU0NBTEUiOjguNSwiU0hBUEUiOjEsIlpFUk8iOjAuNX0sIkJBUlMiOltbIk5hbWUiLCIjZmYwMDAwIiw1LDEwLHRydWUsZmFsc2VdXSwiQkFTRV9MRU5HVEgiOjIsIkJBU0VfV0lEVEgiOjIsIkZMQUciOnsiQVVUT01PREUiOmZhbHNlLCJDT0xPUiI6ImluaGVyaXQiLCJIRUlHSFQiOjEsIklNQUdFIjoiaHR0cDpcL1wvY2xvdWQtMy5zdGVhbXVzZXJjb250ZW50LmNvbVwvdWdjXC8xMDE0OTQzMjU2OTMyMDUzNDcwXC8wQzgzQUUzNjgxNTA4NzA0QTE0RDg1M0Q3NzZDMDM0OUUzODk3MDI3XC8iLCJXSURUSCI6NS4zNzk5OTk5OTk5OTk5OTk4OTM0MTg1ODk2MzU5ODQ5NzIxMTkzMzEzNTk4NjMyODEyNX0sIkdFT01FVFJZIjp7IkNPTE9SIjoiaW5oZXJpdCIsIk1BVEVSSUFMIjowLCJNRVNIIjoiIiwiTk9STUFMIjoiIiwiVEVYVFVSRSI6IiJ9LCJMT0NLX0ZMQUciOmZhbHNlLCJMT0NLX0dFT01FVFJZIjpmYWxzZSwiTUVUQSI6eyJBVVRPVVBEQVRFIjpmYWxzZSwiVVBEQVRFQ0hFQ0siOnRydWV9LCJNT0RVTEVfQVJDIjp0cnVlLCJNT0RVTEVfQkFSUyI6ZmFsc2UsIk1PRFVMRV9GTEFHIjp0cnVlLCJNT0RVTEVfR0VPTUVUUlkiOmZhbHNlLCJNT0RVTEVfTUFSS0VSUyI6dHJ1ZSwiTU9EVUxFX01PVkVNRU5UIjpmYWxzZSwiTU9EVUxFX1NISUVMRFMiOmZhbHNlLCJNT1ZFTUVOVCI6eyJDT0xPUiI6IiMxZjg3ZmYiLCJERUZJTklUSU9OUyI6W1siU3RhbmRzdGlsbCIsImh0dHBzOlwvXC9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tXC9Sb2JNYXllclwvVFRTTGlicmFyeVwvbWFzdGVyXC91aVwvbW92ZVwvc3RhbmRzdGlsbC5wbmciLDAsMCwwLDIsMCwiIzAwODhmZiJdXSwiTEFORFNIT1ciOnRydWUsIkxBTkRURVNUIjpmYWxzZSwiTU9ERSI6MiwiT1JJR0lOIjoiQ0VOVEVSIiwiU0VHTUVOVFMiOltbMCxbXV1dLCJTUEVFRERJU1RBTkNFIjoxLCJTUEVFRE1BWCI6NCwiU1BFRURNSU4iOjAsIlRVUk5NQVgiOjMsIlRVUk5OT1RDSCI6MjIuNSwiVUlIRUlHSFQiOjAuMjV9LCJPVkVSSEVBRF9IRUlHSFQiOjAuMTAwMDAwMDAwMDAwMDAwMDA1NTUxMTE1MTIzMTI1NzgyNzAyMTE4MTU4MzQwNDU0MTAxNTYyNSwiT1ZFUkhFQURfT0ZGU0VUIjotMC41LCJPVkVSSEVBRF9PUklFTlQiOiJIT1JJWk9OVEFMIiwiT1ZFUkhFQURfV0lEVEgiOjIsIlBFUk1FRElUIjoxNjM3NiwiUEVSTVZJRVciOjUyNDI4NywiUkVGUkVTSCI6MywiU0hJRUxEUyI6eyJBVVRPTU9ERSI6dHJ1ZSwiQ09MT1IiOiIjMWY4N2ZmIiwiQ1JJVENPTE9SIjoiI2RhMTkxOCIsIkNSSVRJQ0FMIjpbMSwxLDEsMSwxLDFdLCJDVVJSRU5UIjpbNiw2LDYsNiw2LDZdLCJMSU1JVE1PREUiOjEsIk1BWElNVU0iOls2LDYsNiw2LDYsNl0sIk1JTklNVU0iOlswLDAsMCwwLDAsMF0sIlNIQVBFIjoxLCJVSUhFSUdIVCI6MC4yNX0sIlVJX1NDQUxFIjoxfQ=='\nlocal state = {};local PERMEDIT = 'Black|White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink';local PERMVIEW = 'Grey|Host|Admin|Black|White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink|Clubs|Diamonds|Hearts|Spades|Jokers';local ui_mode = '0';local controller_obj;local assetBuffer = {};local arc_len = 1;local arc_obj;local flag_active = false;local rotateVector = function(a,b)\n            \tlocal c=math.rad(b)local d=math.cos(c)*a[1]+math.sin(c)*a[2]local e=math.sin(c)*a[1]*-1+math.cos(c)*a[2]return{d,e,a[3]}\n            end\nlocal indexOf = function(e, t)\n            \tfor k,v in pairs(t) do\n            \t\tif (e == v) then return k end\n            \tend\n            \treturn nil\n            end\nfunction onDestroy()\nif (arc_obj ~= nil) then arc_obj.destruct() end\nend\nfunction onSave()local data={}\ndata.markers=state.markers\ndata.flag=state.flag\nreturn JSON.encode(data)\nend\nfunction onLoad(save)\n            \tsave = JSON.decode(save) or {}\n            state.markers = save.markers or {}\nstate.flag = save.flag or {}\nflag_active = state.flag.automode or false\nrebuildAssets()\n            \tWait.frames(rebuildUI, 3)\n            end\nfunction ui_setmode(player,mode)\n            \tif mode==ui_mode then\n            \t\tmode='0'\n            \tend\n            \tui_mode=mode\n            \tif mode=='0' then\n            \t\trebuildAssets()\n            \t\tWait.frames(rebuildUI,3)\n else\n            \t\trebuildUI()\n            \tend\n            end\nfunction initiateLink(data)\n            \tif (setController(data)) then\n            \t\treturn controller_obj.call('setMini', {guid=self.guid})\n            \tend\n            \treturn false\n            end\nfunction initiateUnlink()\n            \tlocal theObj = unsetController()\n            \tif (theObj ~= nil) then\n            \t\ttheObj.call('untrackMini', {guid = self.guid})\n            \tend\n            end\nfunction setController(data)\n            \tlocal obj = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n            \tif ((obj.getVar('TRH_Class') or '') ~= 'mini.controller') then\n            \t\terror('object is not a mini controller',2)\n            \telse\n            \t\tcontroller_obj = obj\n            \t\treturn true\n            \tend\n            \treturn false\n            end\nfunction unsetController()\n            \tif (controller_obj ~= nil) then\n            \t\tlocal theObj = controller_obj\n            \t\tcontroller_obj = nil\n            \t\treturn theObj\n            \tend\n            \treturn nil\n            end\nfunction moveCommit() end;\nfunction moveCancel() end;\nfunction moveStart() end;\nfunction spawnGeometry() end;\nfunction editGeometry(a) end;\nfunction clearGeometry() end;\nfunction showArc()\n            \t\tself.UI.hide('btn_show_arc')\n            \t\tself.UI.show('btn_hide_arc')\n            \t\tself.UI.show('disp_arc_len')\n            \t\tself.UI.show('btn_arc_sub')\n            \t\tself.UI.show('btn_arc_add')\n            \t\tlocal a=9.1\n\t\t\t\t\tlocal me = self\nlocal tmp = string.sub('#ffffff', 2, 7) or 'ffffff'\n            \t\tif (string.len(tmp) ~= 6) then tmp = 'ffffff' end\n            \t\tlocal clr = {\n            \t\t\t(tonumber(string.sub(tmp, 1, 2),16) or 255) / 255,\n            \t\t\t(tonumber(string.sub(tmp, 3, 4),16) or 255) / 255,\n            \t\t\t(tonumber(string.sub(tmp, 5, 6),16) or 255) / 255,\n            \t\t}\n arc_obj=spawnObject({\n            \t\t\ttype='custom_model',\n            \t\t\tposition=self.getPosition(),\n            \t\t\trotation=self.getRotation(),\n            \t\t\tscale={a,1,a},\n            \t\t\tmass=0,\n\t\t\t\t\t\tuse_gravity=false,\n            \t\t\tsound=false,\n            \t\t\tsnap_to_grid=false,\n            \t\t\tcallback_function=function(b)\n\t\t\t\t\t\t\tb.jointTo(me, {\n\t\t\t\t\t\t\t\ttype='Fixed',\n\t\t\t\t\t\t\t\tcollision=false\n\t\t\t\t\t\t\t})\n            \t\t\t\tb.setColorTint(clr)\n            \t\t\t\tb.setVar('parent',self)\n            \t\t\t\tb.setLuaScript([[\n\t\t\t\t\t\t\t\tfunction onLoad()\n\t\t\t\t\t\t\t\t\t(self.getComponent('BoxCollider') or self.getComponent('MeshCollider')).set('enabled',false)\n\t\t\t\t\t\t\t\t\tWait.condition(\n\t\t\t\t\t\t\t\t\t\tfunction()\n\t\t\t\t\t\t\t\t\t\t\t(self.getComponent('BoxCollider') or self.getComponent('MeshCollider')).set('enabled',false)\n\t\t\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t\t\t\tfunction()\n\t\t\t\t\t\t\t\t\t\t\treturn not(self.loading_custom)\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tfunction onUpdate()\n\t\t\t\t\t\t\t\t\tif (parent ~= nil) then\n\t\t\t\t\t\t\t\t\t\tif (not parent.resting) then\n\t\t\t\t\t\t\t\t\t\t\tself.setPosition(parent.getPosition())\n\t\t\t\t\t\t\t\t\t\t\tself.setRotation(parent.getRotation())\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tself.destruct()\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t]])\n            \t\t\t\tb.getComponent('MeshRenderer').set('receiveShadows',false)\n            \t\t\t\tb.mass=0\n            \t\t\t\tb.bounciness=0\n            \t\t\t\tb.drag=0\n            \t\t\t\tb.use_snap_points=false\n            \t\t\t\tb.use_grid=false\n            \t\t\t\tb.use_gravity=false\n            \t\t\t\tb.auto_raise=false\n            \t\t\t\tb.auto_raise=false\n            \t\t\t\tb.sticky=false\n            \t\t\t\tb.interactable=false\n            \t\t\tend\n            \t\t})\n            \t\tarc_obj.setCustomObject({\n            \t\t\tmesh='https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/arcs/round0.obj',\n            \t\t\tcollider='https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/utility/null_COL.obj',\n            \t\t\tmaterial=3,\n            \t\t\tspecularIntensity=0,\n            \t\t\tcast_shadows=false\n            \t\t})\n            \tend\nfunction setArcValue() end;\nfunction arcSub() end;\nfunction arcAdd() end;\nfunction hideArc()\n            \t\tif arc_obj ~=nil then\n            \t\t\tarc_obj.destruct()\n            \t\tend\n            \t\tself.UI.show('btn_show_arc')\n            \t\tself.UI.hide('btn_hide_arc')\n            \t\tself.UI.hide('disp_arc_len')\n            \t\tself.UI.hide('btn_arc_sub')\n            \t\tself.UI.hide('btn_arc_add')\n            \tend\nfunction ui_showarc(player) showArc() end;\nfunction ui_hidearc(player) hideArc() end;\nfunction toggleFlag()\n            \t\tflag_active=not flag_active\n            \t\tif flag_active then\n            \t\t\tself.UI.show('flag_container')\n            \t\telse\n            \t\t\tself.UI.hide('flag_container')\n            \t\tend\n            \tend\nfunction ui_flag(a) toggleFlag() end;\nfunction editFlag(data)\n            \t    if (data.image ~= nil) then\n            \t\t\tstate.flag.image = data.image\n            \t        self.UI.setAttribute('inp_flag_image', 'text', data.image)\n            \t    end\n            \t    if (data.width ~= nil) then\n            \t        local n = tonumber(data.width)\n            \t        if (n ~= nil) then\n            \t            state.flag.width = n\n            \t        end\n            \t        self.UI.setAttribute('inp_flag_width', 'text', data.width)\n            \t    end\n            \t    if (data.height ~= nil) then\n            \t        local n = tonumber(data.height)\n            \t        if (n ~= nil) then\n            \t            state.flag.height = n\n            \t        end\n            \t        self.UI.setAttribute('inp_flag_height', 'text', data.height)\n            \t    end\n            \t    if (data.color ~= nil) then\n            \t        if (string.len(data.color) == 7 and string.sub(data.color, 1, 1) == '#') then\n            \t            state.flag.color = data.color\n            \t        end\n            \t        self.UI.setAttribute('inp_flag_color', 'text', data.color)\n            \t    end\n            \t    if (data.automode ~= nil) then\n            \t        state.flag.automode = data.automode\n            \t        self.UI.setAttribute('inp_flag_automode', 'isOn', data.automode)\n            \t        flag_active = data.automode\n            \t    end\n            \tend\nfunction clearFlag()\n            \t\tstate.flag.image = nil\n            \t\tself.UI.setAttribute('inp_flag_image', 'text', '')\n            \t\tstate.flag.width = 0\n            \t\tself.UI.setAttribute('inp_flag_width', 'text', 0)\n            \t\tstate.flag.height = 0\n            \t\tself.UI.setAttribute('inp_flag_height', 'text', 0)\n            \t\tstate.flag.color = '#ffffff'\n            \t\tself.UI.setAttribute('inp_flag_color', 'text', '#ffffff')\n            \t\tstate.flag.automode = false\n            \t\tself.UI.setAttribute('inp_flag_automode', 'isOn', false)\n            \tend\nfunction ui_editflag(player, val, id)\n            \t    local args = {}\n            \t    for a in string.gmatch(id, '([^%_]+)') do\n            \t        table.insert(args,a)\n            \t    end\n            \t    local key = args[3]\n            \t    if (key == 'image') then\n            \t        editFlag({image=val})\n            \t    elseif (key == 'color') then\n            \t        editFlag({color=val})\n            \t    elseif (key == 'width') then\n            \t        editFlag({width=val})\n            \t    elseif (key == 'height') then\n            \t        editFlag({height=val})\n            \t    elseif (key == 'automode') then\n            \t        editFlag({automode=(val == 'True')})\n            \t    end\n            \tend\nfunction ui_clearflag(a) clearFlag() end;\nfunction addMarker(data)\n            \t    local added = false\n            \t    local found = false\n            \t    local count = data.count or 1\n            \t    for i,each in pairs(state.markers) do\n            \t        if (each[1] == data.name) then\n            \t            found=true\n            \t            if (data.stacks or false) then\n            \t                cur = (state.markers[i][4] or 1) + count\n            \t                state.markers[i][4] = cur\n            \t                self.UI.setAttribute('counter_mk_'..i, 'text', cur)\n            \t                self.UI.setAttribute('disp_mk_'..i, 'text', cur > 1 and cur or '')\n            \t                if (controller_obj ~= nil) then controller_obj.call('syncAdjMiniMarker', { guid = self.guid, index=i, count=cur }) end\n            \t                added = true\n            \t            end\n            \t            break\n            \t        end\n            \t    end\n            \t    if (found == false) then\n            \t        table.insert(state.markers, {data.name, data.url, data.color or '#ffffff', (data.stacks or false) and count or 1, data.stacks or false})\n                        if (controller_obj ~= nil) then controller_obj.call('syncMiniMarkers', {}) end\n            \t        rebuildAssets()\n            \t        Wait.frames(rebuildUI, 3)\n            \t        added = true\n            \t    end\n            \t    return added\n            \tend\n\nfunction getMarkers()\n            \t    res = {}\n            \t    for i,v in pairs(state.markers) do\n            \t        res[i] = {\n            \t            name = v[1],\n            \t            url = v[2],\n            \t            color = v[3],\n            \t            count = v[4] or 1,\n            \t            stacks = v[5] or false,\n            \t        }\n            \t    end\n            \t    return res\n            \tend\nfunction popMarker(data)\n            \t    local i = tonumber(data.index)\n            \t    local cur = state.markers[i][4] or 1\n            \t    if (cur > 1) then\n            \t        cur = cur - (data.amount or 1)\n            \t        state.markers[i][4] = cur\n            \t        self.UI.setAttribute('counter_mk_'..i, 'text', ((cur > 1) and cur or ''))\n            \t        self.UI.setAttribute('disp_mk_'..i, 'text', ((cur > 1) and cur or ''))\n            \t        if (controller_obj ~= nil) then controller_obj.call('syncAdjMiniMarker', { guid = self.guid, index=i, count=cur }) end\n            \t    else\n            \t        table.remove(state.markers, i)\n            \t        if (controller_obj ~= nil) then controller_obj.call('syncMiniMarkers', {}) end\n            \t        rebuildUI()\n            \t    end\n            \tend\nfunction removeMarker(data)\n            \t\tlocal index = tonumber(data.index) or error('index must be numeric');\n            \t    local tmp = {}\n            \t    for i,marker in pairs(state.markers) do\n            \t        if (i ~= data.index) then\n            \t            table.insert(tmp, marker)\n            \t        end\n            \t    end\n            \t    state.markers = tmp\n                    if (controller_obj ~= nil) then controller_obj.call('syncMiniMarkers', {}) end\n            \t    rebuildUI()\n            \tend\nfunction clearMarkers()\n            \t    state.markers={}\n                    if (controller_obj ~= nil) then controller_obj.call('syncMiniMarkers', {}) end\n            \t    rebuildUI()\n            \tend\nfunction ui_popmarker(player,value) popMarker({index=value}) end\nfunction ui_clearmarkers(player) clearMarkers() end\nfunction addBar(data) end\nfunction getBars(data) return {} end\nfunction editBar(data) end\nfunction adjustBar(data) end\nfunction removeBar(data) end\nfunction clearBars(data) end\nfunction setShield(data) end\nfunction adjustShield(data) end\nfunction getShieldShape() return 0 end\nfunction toggleShields() end\nfunction rebuildAssets()\n            \tlocal root = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/';\n                local assets = {\n                    {name='ui_gear', url=root..'gear.png'},\n                    {name='ui_close', url=root..'close.png'},\n                    {name='ui_plus', url=root..'plus.png'},\n                    {name='ui_minus', url=root..'minus.png'},\n                    {name='ui_hide', url=root..'hide.png'},\n                    {name='ui_bars', url=root..'bars.png'},\n                    {name='ui_stack', url=root..'stack.png'},\n                    {name='ui_effects', url=root..'effects.png'},\n                    {name='ui_reload', url=root..'reload.png'},\n                    {name='ui_arcs', url=root..'arcs.png'},\n                    {name='ui_flag', url=root..'flag.png'},\n                    {name='ui_arrow_l', url=root..'arrow_l.png'},\n                    {name='ui_arrow_r', url=root..'arrow_r.png'},\n                    {name='ui_arrow_u', url=root..'arrow_u.png'},\n                    {name='ui_arrow_d', url=root..'arrow_d.png'},\n                    {name='ui_check', url=root..'check.png'},\n                    {name='ui_block', url=root..'block.png'},\n                    {name='ui_splitpath', url=root..'splitpath.png'},\n                    {name='ui_cube', url=root..'cube.png'},\n                    {name='movenode', url=root..'movenode.png'},\n                    {name='moveland', url=root..'moveland.png'},\n                    {name='ui_shield', url=root..'shield.png'},\n                }\n            \tassetBuffer = {}\n            \tlocal bufLen = 0\n            \tif (state.flag.image ~= nil and state.flag.image ~= '' and state.flag.width ~= nil and state.flag.height ~= nil and state.flag.width > 0 and state.flag.height > 0) then\n            \t\t\ttable.insert(assets, {name=self.guid..'_flag', url=state.flag.image})\n            \t\tend\n            \t\tfor i,marker in pairs(state.markers) do\n            \t        if (assetBuffer[marker[2]] == nil) then\n            \t            bufLen = bufLen + 1\n            \t            assetBuffer[marker[2]] = self.guid..'_asset_'..bufLen\n            \t            table.insert(assets, {name=self.guid..'_asset_'..bufLen, url=marker[2]})\n            \t        end\n            \t    end\n            \t\tself.UI.setCustomAssets(assets)\n            end\nfunction rebuildUI()\nlocal w = 200; local orient = 'HORIZONTAL';\nlocal mainButtons = {};\nlocal mainButtonX = 20;\nlocal arcActive = arc_obj ~= nil;\ntable.insert(mainButtons, {tag='button', attributes={id='btn_show_arc', active=(not arcActive), height='30', width='30', rectAlignment='MiddleLeft', image='ui_arcs', offsetXY=mainButtonX..' 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_showarc', visibility=PERMEDIT}});\ntable.insert(mainButtons, {tag='button', attributes={id='btn_hide_arc', active=(arcActive), height='30', width='30', rectAlignment='LowerLeft', image='ui_arcs', offsetXY=mainButtonX..' 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_hidearc', visibility=PERMEDIT}});\nmainButtonX = mainButtonX + 30;\nlocal flagActive = (state.flag.image ~= nil and state.flag.image ~= '' and state.flag.height ~= nil and state.flag.width ~= nil and state.flag.height > 0 and state.flag.width > 0);\nif (flagActive) then table.insert(mainButtons, {tag='button', attributes={id='btn_flag_toggle', active=flagActive, height='30', width='30', rectAlignment='MiddleLeft', image='ui_flag', offsetXY=mainButtonX..' 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_flag', visibility=PERMEDIT}}); mainButtonX = mainButtonX + 30; end;\ntable.insert(mainButtons, {tag='button', attributes={height='30', width='30', rectAlignment='MiddleRight', image='ui_gear', offsetXY='-50 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_setmode(markers)', visibility=PERMEDIT}});\ntable.insert(mainButtons, {tag='button', attributes={height='30', width='30', rectAlignment='MiddleRight', image='ui_reload', offsetXY='-20 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='rebuildUI', visibility=PERMVIEW}});\nlocal activeFlag = (state.flag.image ~= nil and state.flag.image ~= '' and state.flag.height ~= nil and state.flag.width ~= nil and state.flag.height > 0 and state.flag.width > 0);\nlocal mainlist_markers = {}\nlocal settingslist_markers = {}\nfor i,marker in pairs(state.markers) do\ntable.insert(mainlist_markers,{tag='panel',attributes={},\n        \t\t\t\tchildren={\n        \t\t\t\t\t{tag='image',attributes={image=assetBuffer[marker[2]],color=marker[3],rectAlignment='LowerLeft',width='60',height='60'}},\n        \t\t\t\t\t{tag='text',attributes={id='counter_mk_'..i,text=marker[4]>1 and marker[4]or'',color='#ffffff',rectAlignment='UpperRight',width='20',height='20'}}\n        \t\t\t\t}\n        \t\t\t});\ntable.insert(settingslist_markers,{tag='panel',attributes={color='#cccccc'},\n        \t\t\t\tchildren={\n        \t\t\t\t\t{tag='image',attributes={width=90,height=90,image=assetBuffer[marker[2]],color=marker[3],rectAlignment='MiddleCenter'}},\n        \t\t\t\t\t{tag='text',attributes={id='disp_mk_'..i,width=30,height=30,fontSize=20,text=marker[4]>1 and marker[4]or'',rectAlignment='UpperLeft',alignment='MiddleLeft',offsetXY='5 0'}},\n        \t\t\t\t\t{tag='button',attributes={width=30,height=30,image='ui_close',rectAlignment='UpperRight',colors='black|#808080|#cccccc',alignment='UpperRight',onClick='ui_popmarker('..i..')'}},\n        \t\t\t\t\t{tag='text',attributes={width=110,height=30,rectAlignment='LowerCenter',resizeTextMinSize=10,resizeTextMaxSize=14,resizeTextForBestFit=true,fontStyle='Bold',text=marker[1],color='Black',alignment='LowerCenter'}}\n        \t\t\t\t}\n        \t\t\t});\nend;\nlocal ui_overhead = { tag='Panel', attributes={childForceExpandHeight='false',visibility=PERMVIEW,position='150 0 -10',rotation=orient=='HORIZONTAL'and'0 0 270'or'-90 0 0',active=ui_mode=='0',scale='1 1 1',height=0,color='red',width=w},\n        \t\t\tchildren={\n        \t\t\t\t{tag='VerticalLayout',attributes={rectAlignment='LowerCenter',childAlignment='LowerCenter',childForceExpandHeight=false,childForceExpandWidth=true,height='5000',spacing='5'},\n        \t\t\t\t\tchildren={(activeFlag and {tag='Panel', attributes={ id='flag_container', minHeight=(state.flag.height) * 100, active=(flag_active == true) }, children={ {tag='image', attributes={image=self.guid..'_flag', width=((state.flag.width) * 100), color=state.flag.color or ''}} } } or {}),{tag='GridLayout', attributes={contentSizeFitter='vertical', childAlignment='LowerLeft', flexibleHeight='0', cellSize='70 70', padding='20 20 0 0'}, children=mainlist_markers},{tag='Panel',attributes={minHeight='30',flexibleHeight='0'}, children=mainButtons }}\n        \t\t\t\t}\n        \t\t\t}\n        \t\t}\nlocal ui_settings = {tag='panel', attributes={id='ui_settings',height='0',width=640,position='50 100 -10',rotation=(orient=='HORIZONTAL'and'0 0 0'or'-90 0 0'),scale='1 1 1',active=(ui_mode ~= '0'),visibility=PERMEDIT},\n        \t\t\tchildren={{tag='panel',attributes={id='ui_settings_flag',offsetXY='0 40',height='400',rectAlignment='LowerCenter',color='black',active=ui_mode=='flag'},\n        \t\t\t\tchildren={\n        \t\t\t\t\t{tag='VerticalLayout',attributes={width=640,height='340',spacing='5',rectAlignment='UpperCenter',offsetXY='0 -30',childForceExpandHeight=false,padding='5 5 5 5'},\n        \t\t\t\t\t\tchildren={\n        \t\t\t\t\t\t\t{tag='Text',attributes={text='URL',color='#ffffff',alignment='MiddleLeft',minHeight='20'}},\n        \t\t\t\t\t\t\t{tag='InputField',attributes={id='inp_flag_image',text=state.flag.image,onEndEdit='ui_editflag',minheight='30'}},\n        \t\t\t\t\t\t\t{tag='HorizontalLayout',attributes={childForceExpandHeight=false,spacing='5'},\n        \t\t\t\t\t\t\t\tchildren={\n        \t\t\t\t\t\t\t\t\t{tag='Text',attributes={text='Width',color='#ffffff',alignment='MiddleLeft',minheight='30',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='InputField',attributes={id='inp_flag_width',text=state.flag.width,onEndEdit='ui_editflag',minheight='30',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='Text',attributes={text='Height',color='#ffffff',alignment='MiddleLeft',minheight='30',preferredWidth='50',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='InputField',attributes={id='inp_flag_height',text=state.flag.height,onEndEdit='ui_editflag',minheight='30',preferredWidth='50'}}}},\n        \t\t\t\t\t\t\t\t\t{tag='HorizontalLayout',attributes={childForceExpandHeight=false,spacing='5'},children={{tag='Text',attributes={text='Color',color='#ffffff',alignment='MiddleLeft',minheight='30',preferredWidth='50',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='InputField',attributes={id='inp_flag_color',text=state.flag.color,onEndEdit='ui_editflag',minheight='30',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='Text',attributes={text='Auto-On',color='#ffffff',alignment='MiddleLeft',minheight='30',preferredWidth='50',preferredWidth='50'}},\n        \t\t\t\t\t\t\t\t\t{tag='Toggle',attributes={id='inp_flag_automode',onValueChanged='ui_editflag',minheight='30',isOn=state.flag.automode,preferredWidth='50'}}\n        \t\t\t\t\t\t\t\t}\n        \t\t\t\t\t\t\t}\n        \t\t\t\t\t\t}\n        \t\t\t\t\t},\n        \t\t\t\t\t{tag='text',attributes={fontSize='24',height='30',text='FLAG',color='#cccccc',rectAlignment='UpperLeft',alignment='MiddleCenter'}},\n        \t\t\t\t\t{tag='Button',attributes={width='150',height='30',rectAlignment='LowerRight',text='Remove Flag',onClick='ui_clearflag'}}\n        \t\t\t\t}\n        \t\t\t},{tag='button', attributes={height='40', width='40', rectAlignment='LowerLeft', image='ui_flag', offsetXY='0 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_setmode(flag)'}},{tag='panel',attributes={id='ui_settings_markers', offsetXY='0 40', height='400', rectAlignment='LowerCenter', color='black', active=(ui_mode == 'markers')},\n        \t\t\tchildren={\n        \t\t\t\t{tag='VerticalScrollView',attributes={width=640,height='340',rotation='0.1 0 0',rectAlignment='UpperCenter',offsetXY='0 -30',color='transparent'},\n        \t\t\t\t\tchildren={\n        \t\t\t\t\t\t{tag='GridLayout',attributes={padding='6 6 6 6', cellSize='120 120', spacing='2 2', childForceExpandHeight='false', autoCalculateHeight='true'}, children=settingslist_markers}\n        \t\t\t\t\t}\n        \t\t\t\t},\n        \t\t\t\t{ tag='text', attributes={fontSize='24', height='30', text='MARKERS', color='#cccccc', rectAlignment='UpperLeft', alignment='MiddleCenter'}},\n        \t\t\t\t{ tag='Button', attributes={width='150', height='30', rectAlignment='LowerRight', text='Clear Markers', onClick='ui_clearmarkers'}},\n        \t\t\t}\n        \t\t},{tag='button', attributes={height='40', width='40', rectAlignment='LowerLeft', image='ui_stack', offsetXY='40 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_setmode(markers)'}},{tag='button', attributes={height='40', width='40', rectAlignment='LowerCenter', image='ui_close', offsetXY='0 0', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', onClick='ui_setmode(0)'}}}\n        \t\t}\nlocal ui_movement = {};\nlocal ui_shields = {}\nself.UI.setXmlTable({ui_shields, ui_movement, ui_overhead, ui_settings});\nend",
"LuaScriptState": "{\"flag\":[],\"markers\":[]}",
"CustomUIAssets": [
{
"Name": "ui_gear",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/gear.png"
},
{
"Name": "ui_close",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/close.png"
},
{
"Name": "ui_plus",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/plus.png"
},
{
"Name": "ui_minus",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/minus.png"
},
{
"Name": "ui_hide",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/hide.png"
},
{
"Name": "ui_bars",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/bars.png"
},
{
"Name": "ui_stack",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/stack.png"
},
{
"Name": "ui_effects",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/effects.png"
},
{
"Name": "ui_reload",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/reload.png"
},
{
"Name": "ui_arcs",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs.png"
},
{
"Name": "ui_flag",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/flag.png"
},
{
"Name": "ui_arrow_l",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_l.png"
},
{
"Name": "ui_arrow_r",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_r.png"
},
{
"Name": "ui_arrow_u",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_u.png"
},
{
"Name": "ui_arrow_d",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_d.png"
},
{
"Name": "ui_check",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/check.png"
},
{
"Name": "ui_block",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/block.png"
},
{
"Name": "ui_splitpath",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/splitpath.png"
},
{
"Name": "ui_cube",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/cube.png"
},
{
"Name": "movenode",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/movenode.png"
},
{
"Name": "moveland",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/moveland.png"
},
{
"Name": "ui_shield",
"URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/shield.png"
}
],